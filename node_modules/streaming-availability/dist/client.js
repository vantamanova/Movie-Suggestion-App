"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChangesApiExtended = exports.ShowsApiExtended = exports.Client = void 0;
var apis_1 = require("./apis");
var Client = /** @class */ (function () {
    function Client(configuration) {
        this.showsApi = new ShowsApiExtended(configuration);
        this.genresApi = new apis_1.GenresApi(configuration);
        this.countriesApi = new apis_1.CountriesApi(configuration);
        this.changesApi = new ChangesApiExtended(configuration);
    }
    return Client;
}());
exports.Client = Client;
var Page = /** @class */ (function () {
    function Page() {
    }
    return Page;
}());
function iterator(maxPages, fetcher) {
    return __asyncGenerator(this, arguments, function iterator_1() {
        var currentPage, pageCount, _i, _a, item;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, __await(fetcher())];
                case 1:
                    currentPage = _b.sent();
                    pageCount = 1;
                    _b.label = 2;
                case 2:
                    if (!true) return [3 /*break*/, 10];
                    _i = 0, _a = currentPage.items;
                    _b.label = 3;
                case 3:
                    if (!(_i < _a.length)) return [3 /*break*/, 7];
                    item = _a[_i];
                    return [4 /*yield*/, __await(item)];
                case 4: return [4 /*yield*/, _b.sent()];
                case 5:
                    _b.sent();
                    _b.label = 6;
                case 6:
                    _i++;
                    return [3 /*break*/, 3];
                case 7:
                    if (!currentPage.hasMorePages) {
                        return [3 /*break*/, 10];
                    }
                    if (maxPages > 0 && pageCount <= maxPages) {
                        return [3 /*break*/, 10];
                    }
                    return [4 /*yield*/, __await(fetcher(currentPage.nextPageCursor))];
                case 8:
                    currentPage = _b.sent();
                    _b.label = 9;
                case 9:
                    pageCount++;
                    return [3 /*break*/, 2];
                case 10: return [2 /*return*/];
            }
        });
    });
}
/**
 * ShowsApi with auto-pagination support
 */
var ShowsApiExtended = /** @class */ (function (_super) {
    __extends(ShowsApiExtended, _super);
    function ShowsApiExtended() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Performs SearchShowsByFiltersRequest with auto-pagination.
     *
     * @param requestParameters Request parameters
     * @param maxPages Maximum number of pages to fetch. If 0 or less, fetches all pages.
     * @param initOverrides Optional overrides for the fetch init parameters
     *
     * @returns AsyncGenerator of Show
     */
    ShowsApiExtended.prototype.searchShowsByFiltersWithAutoPagination = function (requestParameters, maxPages, initOverrides) {
        var _this = this;
        return iterator(maxPages, function (cursor) { return __awaiter(_this, void 0, void 0, function () {
            var pageRequestParameters, searchResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pageRequestParameters = __assign({}, requestParameters);
                        if (cursor) {
                            pageRequestParameters.cursor = cursor;
                        }
                        return [4 /*yield*/, this.searchShowsByFilters(pageRequestParameters, initOverrides)];
                    case 1:
                        searchResult = _a.sent();
                        return [2 /*return*/, {
                                items: searchResult.shows,
                                hasMorePages: searchResult.hasMore,
                                nextPageCursor: searchResult.nextCursor,
                            }];
                }
            });
        }); });
    };
    return ShowsApiExtended;
}(apis_1.ShowsApi));
exports.ShowsApiExtended = ShowsApiExtended;
/**
 * ChangesApi with auto-pagination support
 */
var ChangesApiExtended = /** @class */ (function (_super) {
    __extends(ChangesApiExtended, _super);
    function ChangesApiExtended() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Performs getChanges with auto-pagination.
     * Unlike the original getChanges, this method returns ChangeWithShow objects, which include the Show object
     * that corresponds to the showId field of the Change object.
     *
     * @param requestParameters Request parameters
     * @param maxPages Maximum number of pages to fetch. If 0 or less, fetches all pages.
     * @param initOverrides Optional overrides for the fetch init parameters
     *
     * @returns AsyncGenerator of ChangeWithShow
     */
    ChangesApiExtended.prototype.getChangesWithAutoPagination = function (requestParameters, maxPages, initOverrides) {
        var _this = this;
        return iterator(maxPages, function (cursor) { return __awaiter(_this, void 0, void 0, function () {
            var pageRequestParameters, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pageRequestParameters = __assign({}, requestParameters);
                        if (cursor) {
                            pageRequestParameters.cursor = cursor;
                        }
                        return [4 /*yield*/, this.getChanges(pageRequestParameters, initOverrides)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, {
                                items: result.changes.map(function (change) { return (__assign(__assign({}, change), { show: result.shows[change.showId] })); }),
                                hasMorePages: result.hasMore,
                                nextPageCursor: result.nextCursor,
                            }];
                }
            });
        }); });
    };
    return ChangesApiExtended;
}(apis_1.ChangesApi));
exports.ChangesApiExtended = ChangesApiExtended;
